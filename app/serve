#! /usr/bin/env python

# This script is taken from AWS - Sagemaker - Examples - Bring your own container - scikit example:
# https://github.com/aws/amazon-sagemaker-examples/blob/main/advanced_functionality/scikit_bring_your_own/container/decision_trees/serve


# This file implements the scoring service shell. You don't necessarily need to modify it for various
# algorithms. It starts nginx and uvicorn with the correct configurations and then simply waits until
# uvicorn exits.
#
# The Flask server is specified to be the app object in wsgi.py
#
# We set the following parameters:
#
# Parameter                Environment Variable              Default Value
# ---------                --------------------              -------------
# number of workers        MODEL_SERVER_WORKERS              the number of CPU cores
# timeout                  MODEL_SERVER_TIMEOUT              60 seconds

import multiprocessing
import os
import signal
import subprocess
import sys

cpu_count = min(multiprocessing.cpu_count(), 2)

model_server_timeout = os.environ.get("MODEL_SERVER_TIMEOUT", 60)
model_server_workers = int(os.environ.get("MODEL_SERVER_WORKERS", cpu_count))


def sigterm_handler(nginx_pid, uvicorn_pid):
    print("Inference server exiting")
    try:
        os.kill(nginx_pid, signal.SIGQUIT)
    except OSError:
        pass
    try:
        os.kill(uvicorn_pid, signal.SIGTERM)
    except OSError:
        pass

    sys.exit(0)


def start_server():
    print("Starting the inference server with {} workers.".format(model_server_workers))

    # link the log streams to stdout/err so they will be logged to the container logs
    subprocess.check_call(["ln", "-sf", "/dev/stdout", "/var/log/nginx/access.log"])
    subprocess.check_call(["ln", "-sf", "/dev/stderr", "/var/log/nginx/error.log"])

    nginx = subprocess.Popen(["nginx", "-c", "/opt/app/nginx.conf"])
    uvicorn = subprocess.Popen(
        [
            "uvicorn",
            "--port",
            "8080",
            "--timeout-keep-alive",
            str(model_server_timeout),
            "--uds",
            "/tmp/uvicorn.sock",
            "--workers",
            str(model_server_workers),
            "inference_app:app",
        ]
    )

    signal.signal(signal.SIGTERM, lambda a, b: sigterm_handler(nginx.pid, uvicorn.pid))

    # If either subprocess exits, so do we.
    pids = set([nginx.pid, uvicorn.pid])
    while True:
        pid, _ = os.wait()
        if pid in pids:
            break

    sigterm_handler(nginx.pid, uvicorn.pid)


# The main routine just invokes the start function.

if __name__ == "__main__":
    start_server()
